extern #include <stdlib.h>

export default namespace Memory {
  # Allocate space enough to store *size* of objects of type *T*.
  # NOTE: Could omit `<T>` here, done for readability.
  threadsafe def allocate<T>(size : USize) : T* {
    final ptr = unsafe! $malloc(@sizeof<T>() * size) as T*
    if ptr.null? then throw Error
    return ptr
  }

  # Rellocate previously allocated space to store *new_size* of objects of type *T*.
  #
  # NOTE: The call is really threadsafe, but the stored objects
  # must be dereferenced manually, thus the unsafety modifier.
  unsafe def reallocate(from : T*, new_size : USize) : T* {
    threadsafe! do
      if (new_size == 0) throw Error
      final ptr = unsafe! $realloc(from as $void*, @sizeof<T>() * size)
      if ptr.null? then throw Error
      return ptr
    end
  }

  # NOTE: The call is really threadsafe, but the stored objects
  # must be dereferenced manually, thus the unsafety modifier.
  unsafe def free(pointer : T*) : void {
    threadsafe! unsafe! $free(pointer)
  }
}
